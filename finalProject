#jordan's code
import random
from argparse import ArgumentParser
import sys
import re

class Player:
    def __init__(self, player_name):
        self.name = player_name
        #would this go in gamestate since it's a single player game?
        self.guesses_made = []
        self.incorrect_guesses = 3
        self.points = 0
        self.word_guessed = False
        
    #michael's code, im still working on these, my bad if they overlap w/ ur code
    def guess(word, jumble):
        #i think you might only need word param

    # convert both words to lowercase to ignore case sensitivity
        word = word.lower()
        jumble = jumble.lower()
    
    #create dictionaries to count the occurrences of each letter in both words
        word_count = {}
        jumble_count = {}
    
    #ount the occurrences of each letter in the word
        for letter in word:
            word_count[letter] = word_count.get(letter, 0) + 1
    
    #count the occurrences of each letter in the jumble
        for letter in jumble:
            jumble_count[letter] = jumble_count.get(letter, 0) + 1
    
    #check if the jumble contains all the letters required to form the word
        for letter, count in word_count.items():
            if letter not in jumble_count or jumble_count[letter] < count:
                return False


    #get the player's guess
        player_guess = input("Enter your guess: ")

# Doing this already in outcome.gameplay. Can this function just return 
# a scrambled word?
#check if the player's guess is correct
        attempts_left =3 
        if guess(word, player_guess):
            print("Yes, your guess is correct!")
        else:
            print("No, your guess is incorrect.")
            attempts_left -=1
        if attempts_left == 0:    
            return "No attempts left. Try again later."


#Ben's code
class GameState:
    def __init__(self, theme=None):
        self.theme = theme
    def game_state(self):
        pass
    
    def get_theme(self, theme_choice):
        print("Possible themes: fruit, animals, sports, countries")
        #raise value error if user doesn't input 'fruit' or 'animals'
        if theme_choice not in ["fruit", "animals", "sports", "countries"]:
            raise ValueError("Invalid theme.")
        #sets theme to input
        theme_choice = input("Choose your theme")
        self.theme = theme_choice
        return self.theme
        
        
    #ben's magic method
    
    #jordan will write a function to see if player wants to play again
    #will use conditional expression
    def play_again(self):
        play_again = input("Do you want to play the game again? Y/N: ")
        return True if play_again.upper() == "Y" else False
        

#luis' code
    def select_random_word(self):
        file_path = f'{self.theme}_words.txt'
        with open(file_path, 'r') as file:
            words = [line.strip() for line in file]
        random_word = random.choice(words)

        return random_word

    # def letters(self):
    #     letters1 = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
    #     random_letters = (random.choice(letters1), 3) 
    #     random_word += random_letters

        
    def scramble(self, random_word):
        shuffled_word = list(random_word)
        random.shuffle(shuffled_word)

        print(shuffled_word)
    
#gabrielle's code

class Outcome:
    def __init__(self, word):
        self.score = 0
        self.word = word.lower()
        self.letter_dict = {
    'a': 3,
    'b': 2,
    'c': 1,
    'd': 1,
    'e': 3,
    'f': 2,
    'g': 2,
    'h': 1,
    'i': 3,
    'j': 5,
    'l': 3,
    'm': 2,
    'n': 2,
    'o': 5,
    'p': 2,
    'q': 5,
    'r': 2,
    's': 2, 
    't': 1,
    'u': 2,
    'v': 5,
    'w': 3,
    'x': 2,
    'y': 5,
    'z': 10
    }

    def __str__(self):
        self.calculatePotentialScore()
        print("The potential score for your word is: " + str(self.score) + " points.")
 
    def calculatePotentialScore(self):
        for i in self.word:
            self.score += self.letter_dict[i]
        return self.score

    def wordVerification(self, word):
        pattern = r"^[a-zA-Z]+$"
        if re.search(pattern, word):
            if len(word) < 4:
                bonus_points = 0
            else:
                bonus_points = len(word) * 2
            self.score += bonus_points
            return True
        else:
            print("Invalid Input Format. Please use only letters!")
            return False

    def results(self, guesses, answered, name="User"):

        if answered == 1:
            print("Congrats! " + str(name) + " got it correct!")
            print(str(name) + " recieved a score of " + str(self.score) + " with " + str(guesses) + " guesses remaining.")
        else:
            print(str(name) + " have run out of guesses and did not get the right answer!")
            print("Sorry " + str(name) + ", Please play again soon!")
            print(str(name) + " have run out of guesses and did not get the right answer!")
            print("Sorry " + str(name) + ", Please play again soon!")
                

    def gameplay(self, word, guesses,name = "User"):
        self.__str__()

        user_inp = input("What is your guess? \n")
        flag = False
        while not flag:
            sucess = self.wordVerification(user_inp)
            if sucess:
                flag = True
            else:
                user_inp = input("What is your guess? \n")
        answered = 0
        while guesses > 1 and answered == 0:
            if str(user_inp.lower()) == word.lower():
                answered += 1
                break
            else:
                print("Incorrect guess. Try again!")
                guesses -= 1
                print("You have " + str(guesses) + " remaining.")
                user_inp = input("What is your next guess? \n")
                flag = False
                while not flag:
                    sucess = self.wordVerification(user_inp)
                    if sucess:
                        flag = True
                    else:
                        user_inp = input("What is your next guess? \n")
        self.results(guesses, answered, name)
        return guesses

#Jordan -- arg parse and if main
def parse_args(arglist):
   """parses the arguments and code given in our main() function

   Args:
       arglist (str): list of arguments to parse

   Returns:
       str: parsed arguments from those given
   """
   parser = ArgumentParser()
   parser.add_argument("theme", help = "Provide theme")
   return parser.parse_args(arglist)


if __name__ == "__main__":
   args = parse_args(sys.argv[1:])
   game_state = GameState(args.theme)
   #word = game_state.select_random_word()
   name = input("Please enter your name: ")
   player1 = Player(name)
   play = True
   while play:
        random_word = game_state.select_random_word()
        scrambled_word = game_state.scramble(random_word)
        running = Outcome(random_word)
        #add player.scramble or whatever scramble function is called in player
        running.gameplay(random_word, player1.incorrect_guesses, name)
        # game_state.select_random_word()
        play = game_state.play_again()
        if play == True:
            theme_select = input("What theme would you like?")
            game_state.theme = theme_select
        #theme_select = input("What theme would you like?")
   else:
       sys.exit() 
       
