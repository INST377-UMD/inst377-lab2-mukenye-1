#jordan's code
import random
from argparse import ArgumentParser
import sys
from time import sleep

class Player:
    def __init__(self, player_name):
        self.name = player_name
        self.guesses_made = []
        self.incorrect_guesses = 5
        self.points = 0
        
    #jordans, still figuring this out
    def __add__(self, other):
        #basically decides how many points given on certain guesses
        return Player((self.points + other))
        
    
    #michael's code
    def guess_letter(theme, answer, letter, attempts_left):
        """
        Guess a letter in the word based on the given theme.
        
        Args:
        - theme: The theme of the word (string)
        - answer: The word the player is trying to guess (string).
        - letter: The letter guessed by the player (string)
        - attempts_left: The number of attempts the player has left (integer)
        
        Returns:
        - A string indicating whether the letter is correct or not.
        """
        if attempts_left <= 0:
            return "No attempts left. Try again later."
        
        if letter in answer:
            return "Correct!"
        else:
            attempts_left -= 1
            if attempts_left == 0:
                return "Incorrect. No attempts left."
            else:
                return f"Incorrect. Try again, {attempts_left} attempts left."
    #not sure if we need to keep my code below bc it is similar to code above
    #can also kinda combine this with the code above
    def turn(self, player):
        print(f"It is your turn, {self.player}!")
        spin_wheel = random.randint(1, 7)
        print(spin_wheel)
        guess = input("Guess a Letter, or guess the word")
        return guess
        if guess == word:
            self.guesses_made +=1
            print("You win!")
        elif guess in word:
            self.guesses_made +=1
            print(f"{self.guess} is in the word!")
            #need to display how the guess shows up in the displayed word output
        else:
            self.incorrect_guesses -= 1
            self.guesses_made +=1
            print("Not in our word/phrase. Your turn is over.")

#Ben's code
#trying to add this line 
#add another comment
#adding a line to the code
#basic representation of the board
def game_state(self):
    guesses = ''
    while self.attempts_left > 0:
        for letter in self.answer:
            if letter in guesses:
                print(letter, end=" ")
            else:
                print("_")

#luis' code
#new test
#is this supposed to be main, or can it be? if so, we should rename it to main and put it towards the end
#self, then self.theme? and this maybe main.
#ben will do a theme method 
def select_random_word(theme):
    file_path = f'{theme}_words.txt'
    with open(file_path, 'r') as file:
        words = [line.strip() for line in file]
    random_word = random.choice(words)

    return random_word

#gabrielle's code
#test
#note: we can prob do a repr at the end of this class for magic method points!
class Outcome:
    def __init__(self, letter_dict, word):
        self.score = 0
        self.word = word.strip()
        self.unstrippedword = word
        self.letter_dict = {
    'a': 3,
    'b': 2,
    'c': 1,
    'd': 1,
    'e': 3,
    'f': 2,
    'g': 2,
    'h': 1,
    'i': 3,
    'j': 5,
    'l': 3,
    'm': 2,
    'n': 2,
    'o': 5,
    'p': 2,
    'q': 5,
    'r': 2,
    's': 2, 
    't': 1,
    'u': 2,
    'v': 5,
    'w': 3,
    'x': 2,
    'y': 5,
    'z': 10
    }
    def calculateScore(self):
        for i in self.word:
            self.score += self.letter_dict[i]
         #for i in each word
         #strip the word
         #identify each letters chosen value from the dictionary
        #
        return self.score
#.keys 
         
test_dict = {
    'a': 3,
    'b': 2,
    'c': 1,
    'd': 1,
    'e': 3,
    'f': 2,
    'g': 2,
    'h': 1,
    'i': 3,
    'j': 5,
    'l': 3,
    'm': 2,
    'n': 2,
    'o': 5,
    'p': 2,
    'q': 5,
    'r': 2,
    's': 2, 
    't': 1,
    'u': 2,
    'v': 5,
    'w': 3,
    'x': 2,
    'y': 5,
    'z': 10
    }
#for loop 

word = "hello"

test = Outcome(test_dict, word)

test.calculateScore()

#Jordan -- arg parse and if main
def parse_args(arglist):
   """parses the arguments and code given in our main() function

   Args:
       arglist (str): list of arguments to parse

   Returns:
       str: parsed arguments from those given
   """
   parser = ArgumentParser()
   parser.add_argument("theme", help = "Provide theme")
   return parser.parse_args(arglist)


if __name__ == "__main__":
   args = parse_args(sys.argv[1:])
   main(args.theme)