#jordan's code
import random
from argparse import ArgumentParser
import sys
import re

class Player:
    def __init__(self, player_name):
        self.name = player_name
        self.guesses_made = []
        self.incorrect_guesses = 3
        self.points = 0
        self.word_guessed = False


#Ben's code
class GameState:
    def __init__(self, theme=None):
        self.theme = theme
        self.possible_themes = ['sports', 'fruit', 'animals', 'countries']   
        
    #Ben: magic method; prints possible themes  
    def __str__(self):
        return f"Possible Themes: {', '.join(self.possible_themes)}"
    
     
    def get_theme(self):
        theme = input("Choose your theme: ")
        #raise value error if user doesn't input 'fruit' or 'animals'
        if theme not in self.possible_themes:
            raise ValueError("Invalid theme.")
        #sets theme to input
        self.theme = theme
        return self.theme
        
    
    #jordan function to play again
    def play_again(self):
        play_again = input("Do you want to play the game again? Y/N: ")
        return True if play_again.upper() == "Y" else False
        

#luis' code
    def select_random_word(self):
        file_path = f'{self.theme}_words.txt'
        with open(file_path, 'r') as file:
            words = [line.strip() for line in file]
        random_word = random.choice(words)

        return random_word

    def letters(self):
        letters1 = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 
        'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
        random_letters = random.sample(letters1, 3) 
        return random_letters

        
    def scramble(self, random_word):
        random_letters = self.letters()
        random_word += ''.join(random_letters)
        shuffled_word = list(random_word)
        random.shuffle(shuffled_word)

        print(shuffled_word)
        return ''.join(shuffled_word)

    
    def gameboard(self):
        print(f'''------------------------------------------------
                             Welcome to Jeopogram
                Your jumble is {self.random_word}

                ---------------------------------------------------
             
              ''')
        guess = input("Enter your guess:")
        max_line_length = max(len(jumble), len(guess)) + 34  # 34 is the length of the static part of the message
        dashed_line = '-' * max_line_length

        print(f'''
 {dashed_line}
                            Jeopogram
                 Your jumble is {self.random_word}
                 Your guess {guess} was correct/incorrect
                
 {dashed_line}
             
             ''')
        
    
#gabrielle's code

class Outcome:
    def __init__(self, word):
        self.score = 0
        self.word = word.lower()
        self.letter_dict = {
    'a': 3,
    'b': 2,
    'c': 1,
    'd': 1,
    'e': 3,
    'f': 2,
    'g': 2,
    'h': 1,
    'i': 3,
    'j': 5,
    'k': 6,
    'l': 3,
    'm': 2,
    'n': 2,
    'o': 5,
    'p': 2,
    'q': 5,
    'r': 2,
    's': 2, 
    't': 1,
    'u': 2,
    'v': 5,
    'w': 3,
    'x': 2,
    'y': 5,
    'z': 10
    }

    def __str__(self):
        self.calculatePotentialScore()
        print("The potential score for your word is: " + str(self.score) + " points.")
 
    def calculatePotentialScore(self):
        for i in self.word:
            self.score += self.letter_dict[i]
        return self.score

    def wordVerification(self, word):
        pattern = r"^[a-zA-Z]+$"
        if re.search(pattern, word):
            if len(word) < 4:
                bonus_points = 0
            else:
                bonus_points = len(word) * 2
            self.score += bonus_points
            return True
        else:
            print("Invalid Input Format. Please use only letters!")
            return False

    def results(self, guesses, answered, name="User"):
        self.correctly_answered_users = set()

        if answered == 1:
            self.correctly_answered_users.add(name)
            print("Congrats! " + str(name) + " got it correct!")
            print(str(name) + " recieved a score of " + str(self.score) + " with " + str(guesses) + " guesses remaining.")
        else:
            print(str(name) + " has run out of guesses and did not get the right answer!")
            print("Sorry " + str(name) + ", Please play again soon!")
            
                

    def gameplay(self, word, guesses, name = "User"):
        self.__str__()

        user_inp = input("What is your guess? \n")
        flag = False
        while not flag:
            sucess = self.wordVerification(user_inp)
            if sucess:
                flag = True
            else:
                user_inp = input("What is your guess? \n")
        answered = 0
        while guesses > 1 and answered == 0:
            if str(user_inp.lower()) == word.lower():
                answered += 1
                break
            else:
                print("So sorry " + str(name) +" Incorrect guess. Try again!")
                guesses -= 1
                print("You have " + str(guesses) + " remaining.")
                user_inp = input(str(name) +", What is your next guess? \n")
                flag = False
                while not flag:
                    sucess = self.wordVerification(user_inp)
                    if sucess:
                        flag = True
                    else:
                        user_inp = input(str(name) + ", What is your next guess? \n")
        if str(user_inp.lower()) == word.lower() and guesses == 1:
            answered += 1
        self.results(guesses, answered, name)

        return guesses
    
    def get_total(self):
        return self.score

#Jordan -- arg parse and if main
def parse_args(arglist):
   """parses the arguments and code given in our main() function

   Args:
       arglist (str): list of arguments to parse

   Returns:
       str: parsed arguments from those given
   """
   parser = ArgumentParser()
   return parser.parse_args(arglist)
# class board:
#     def __init__(self, board):
#         self.board = board
#     def gameboard(self):
#         #jumble = "smklappsdle"
#         print(f'''------------------------------------------------
#                              Welcome to Jeopogram
#                 Your jumble is {self.}

#                 ---------------------------------------------------
             
#              ''')

#         guess = input("Enter your guess:")
#         max_line_length = max(len(jumble), len(guess)) + 34  # 34 is the length of the static part of the message
#         dashed_line = '-' * max_line_length

#         print(f'''
# {dashed_line}
#                         Jeopogram
#                 Your jumble is {jumble}
#                 Your guess {guess} was correct/incorrect
                
# {dashed_line}
             
#              ''')

# board_instance = board()
# board_instance.gameboard()


#Jordan -- arg parse and if main
def parse_args(arglist):
   """parses the arguments and code given in our main() function

   Args:
       arglist (str): list of arguments to parse

   Returns:
       str: parsed arguments from those given
   """
   parser = ArgumentParser()
   return parser.parse_args(arglist)


if __name__ == "__main__":
   args = parse_args(sys.argv[1:])
   #word = game_state.select_random_word()
   name = input("Please enter your name: ")
   player1 = Player(name)
   print(GameState())
   game_state = GameState()
   theme = game_state.get_theme()
   game_state = GameState(theme)
   play = True
   totalScore = 0
   while play:
        
        random_word = game_state.select_random_word()
        scrambled_word = game_state.scramble(random_word)
        running = Outcome(random_word)
        #shuffled_word = game_state.scramble(random_word)
        #game_state.gameboard(shuffled_word)
        #add player.scramble or whatever scramble function is called in player
        running.gameplay(random_word, player1.incorrect_guesses, name)
        totalScore += running.get_total()
        
        play = game_state.play_again()
        print("the amount of points you have scored so far is " + str(totalScore))
        if play == True:
            game_state = GameState()
            theme = game_state.get_theme()
            game_state = GameState(theme)
   else:
       sys.exit() 
       